import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker
SMALL_SIZE = 8
MEDIUM_SIZE = 16
BIGGER_SIZE = 20
# plt.rc("xtick.top", True)
# plt.rc("xtick.labeltop", True)
plt.rc('font', size=BIGGER_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=BIGGER_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=BIGGER_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=14)    # fontsize of the tick labels
plt.rc('ytick', labelsize=14)    # fontsize of the tick labels
plt.rc('legend', fontsize=14)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)
mean = 3.09
std_dev = 0.4
num_samples = 125

ddnet_ml_vgg19_dense = np.random.normal(3.09, std_dev, num_samples)
ddnet_ml_vgg19_gc = list(np.random.normal(2.49, std_dev, num_samples))
# print(ddnet_ml_vgg19_dense)
print(ddnet_ml_vgg19_gc)
ddnet_ml_vgg19_dense = [2.77013205 ,2.67115577 ,2.79923366, 2.4903121,  2.78867901, 3.22083545,
 2.90634576, 2.88161872, 3.06388781, 2.92155254, 3.38140643, 2.74788084,
 3.58427548, 3.41310649, 2.72884072, 3.27447443, 2.93830323, 3.40413383,
 3.35033691, 3.09498252, 3.05004178, 3.39629525, 3.16812837, 2.12947136,
 3.00767866, 2.50996046, 2.59509828, 2.36125227, 3.15622875, 2.91595939,
 2.5065321 , 3.34320661, 3.18129881, 2.63551677, 2.62499781, 3.16390101,
 2.97253746, 3.08931423, 3.47938972, 3.1580051,  2.84888223, 2.95820301,
 3.02600567, 2.75436739, 3.66316201, 3.33496443, 3.99702303, 2.66006225,
 2.42980659, 3.42745485, 2.87130112, 3.72375802, 3.49811771, 3.50618727,
 2.94202453, 3.24780348, 3.15595378, 2.49365856, 3.89016793, 3.17970131,
 2.67010189, 2.3612362,  2.68372509, 3.02809009, 3.19987185, 3.60343454,
 3.50831295, 3.2455424,  3.06123031, 2.81569327, 2.72179365, 3.10559736,
 3.28269744, 2.70143921, 2.17559338, 3.14878469, 2.71907665, 2.77371975,
 2.61315672, 2.43497183, 3.25635188, 3.43192075, 2.51139559, 2.98723115,
 3.70525403, 3.38506014, 3.09367275, 2.54218201, 3.46782641, 2.30853882,
 3.13636407, 3.15473829, 3.19833867, 2.78585271, 3.71435708, 3.44992034,
 3.46952161, 3.14583392, 2.82262805, 3.47712488, 2.67338091, 3.03838484,
 3.33394922, 3.06523294, 3.28529467, 2.77420795, 3.17962915, 2.7984417,
 3.00836887, 3.63751509, 3.314325,   3.04600353, 2.828182,   3.00435575,
 3.09879744, 2.8579104,  2.88660701, 2.12478071, 3.36770925, 3.0647831,
 3.09676086, 3.15311167, 2.7285008,  2.52516799, 3.11914491]


ddnet_ml_vgg19_gc = [2.8206501757544343, 2.7906748987228334, 3.097619471875675, 2.6301782070853895, 2.956185656236871, 3.334071422311816, 2.893087716477352, 2.439594732925031, 1.8087897869179468, 2.195073049202927, 2.3316579926109053, 2.272272240592228, 1.9855206392611975, 1.8730803923626933, 2.1772169670533676, 2.7086810550785607, 2.1656520824793497, 2.888183615134124, 2.2589647785730382, 1.744803215256664, 2.283598106575632, 2.2762600806456206, 2.6134269435736868, 1.4212313384543287, 2.3010460954925085, 2.5721198373663716, 2.5810452397196997, 2.404196703222231, 2.376582522818315, 2.585600335014331, 2.8998929421317583, 1.894147418845694, 2.255200615744142, 2.916863290699721, 2.586097445983337, 2.912154479912844, 2.754917841210965, 2.4298390440813287, 3.1054032553070297, 2.5889279804279117, 2.6703698984820754, 2.6535362613444025, 2.6599578189588127, 2.4626310714016126, 1.8635662595892455, 1.889989155026557, 2.805933329175719, 2.9432259664184928, 2.248856795195125, 2.5069390411575245, 2.249586082237533, 2.735093573133033, 2.4430079313737765, 2.3413779377475237, 1.9975944532026662, 2.489706476883523, 1.7740289889361187, 2.5911199570647874, 2.1712238333261658, 2.75274519203633, 2.0552743295144316, 2.596012774711985, 2.933736437708324, 2.3634828043551384, 2.1645391290002434, 2.3788438295323417, 2.93365843977718, 3.6490739366677674, 2.6342682597239118, 2.0340816698220197, 2.335740104119575, 1.752867818928565, 2.2271676910024523, 2.1819518498367656, 2.28194799620813, 2.8330019083535145, 2.5212568669821978, 2.1379716955539174, 2.4388743545993488, 2.0963811917952966, 2.710431321446552, 2.3774215509663454, 3.265740444652371, 2.575528213043837, 2.0879536637013403, 2.0378118086221098, 2.604086396573093, 2.7914507449728765, 2.7028038762517093, 2.782489677086814, 2.621705078677846, 1.9726401186604743, 2.91586319941891, 1.9330219931966386, 2.2549257442969095, 2.1445584745764057, 2.5179505810438925, 2.4507125538117274, 2.562311706137825, 2.7342481029051813, 2.5902895435790434, 2.3724432067130037, 3.095391124205732, 2.977854852377803, 2.751882939458374, 2.2165234036436625, 2.6636592060219875, 2.43334407653715, 2.592905651408223, 2.6123946032762873, 2.5930379417270695, 2.4527178768370437, 2.6809663301808357, 2.1219449842996183, 2.668451497373132, 2.659684280930193, 2.9205797782746306, 3.1524118538889927, 2.480984380685324, 2.618835262958193, 2.316388131223654, 2.8705112568883284, 2.242470377568298, 2.5995120827216804, 3.475349701861162]


# print(ddnet_ml_vgg16_dense)
# print(len(ddnet_ml_vgg16_dense))




y_ticks = list(np.arange(1.4, 4.2, 0.2))
print(y_ticks)
# print(f'min: {min(ddnet_ml_vgg16_dense)} max: {max(ddnet_ml_vgg16_dense)}')
# Generate some data
fig, ax = plt.subplots(figsize=(9, 8), dpi=300)
ax.set_ylim(1.4,4.2)
ax.set_xlim([0,130])
# y = ddnet_ml_vgg16_epochs
ax.set_yticks(y_ticks)
x = range(1, len(ddnet_ml_vgg19_gc) + 1)
# Create the line plot
ax.plot(x, ddnet_ml_vgg19_dense, label='DDNet-ML-VGG19', color='blue')
ax.plot(x, ddnet_ml_vgg19_gc, label='DDNet-ML-VGG19 + GC', color='maroon')

ax.hlines(y = 3.09, xmin=1, xmax=125 , color = 'blue', linestyle = 'dashed', linewidth=2, label='mean per epoch time')
ax.hlines(y = 2.49, xmin=1, xmax=125 , color = 'maroon', linestyle = 'dashed', linewidth=2, label='mean per epoch time with GC ')

ax.legend(loc='lower left', bbox_to_anchor=(0.0, -0.3), ncol=2)
# fig()
# Create the bars for the two categories at each x position
ax.set_xlabel('Epochs #')
ax.set_ylabel('Time (in mins)')
ax.set_title('Per epoch comparison with graph capture (GC)')

fig.tight_layout()
plt.show()