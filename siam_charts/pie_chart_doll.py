import matplotlib.pyplot as plt
import numpy as np
import matplotlib.ticker as ticker
SMALL_SIZE = 8
MEDIUM_SIZE = 26
BIGGER_SIZE = 28
# plt.rc("xtick.top", True)
# plt.rc("xtick.labeltop", True)
plt.rc('font', size=BIGGER_SIZE)          # controls default text sizes
plt.rc('axes', titlesize=BIGGER_SIZE)     # fontsize of the axes title
plt.rc('axes', labelsize=BIGGER_SIZE)    # fontsize of the x and y labels
plt.rc('xtick', labelsize=MEDIUM_SIZE)    # fontsize of the tick labels
plt.rc('ytick', labelsize=BIGGER_SIZE)    # fontsize of the tick labels
plt.rc('legend', fontsize=MEDIUM_SIZE)    # legend fontsize
plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title
mean = 1.58
std_dev = 0.2
num_samples = 50

ddnet_dense = np.random.normal(mean, std_dev, num_samples)
# ddnet_ml_vgg16_dense_gv = list(np.random.normal(2.12, std_dev, num_samples))
print(list(ddnet_dense))
# ddnet_dense = [2.59854656,2.66996704, 2.66213015, 2.54766797, 2.39784996, 2.53954472,
#  3.05299298,2.71779565, 2.92355591, 2.80422165, 2.08506981, 2.42650364,
#  2.99650131,2.90065277, 2.4136367 , 2.2723965, 2.71144993, 2.70307212,
#  2.88740012,2.4151675 , 2.48272565, 2.78038018, 2.3185743 , 2.40150115,
#  3.06544419,2.84277733, 2.18268667, 2.44035153, 3.05236881, 2.80140829,
#  2.09523797,2.84231578, 2.23313226, 2.41474693, 2.7554488 , 2.45826687,
#  2.24078749,2.69639119, 2.03874905, 2.41419894, 3.21, 2.64748863,
#  2.50784501,2.80771211, 3.21 , 2.45772141, 2.86876345, 2.24191898,
#  2.16371827,2.34550137]
y1 = [
1.44,
1.05,
1.31,
1.71,
1.23,
1.7,
1.39,
1.81,
1.9,
1.25,
1.43,
1.52,
1.54,
1.72,
1.88,
1.49,
1.39,
1.23,
1.44,
1.52,
1.68,
1.04,
1.77,
1.76,
1.48,
1.8,
1.05,
1.36,
1.73,
1.4,
1.82,
1.92,
1.2,
1.26,
1.76,
1.03,
1.84,
1.54,
1.03,
1.22,
1.37,
1.86,
1.54,
1.44,
1.52,
1.34,
1.57,
1.42,
1.72,
1.82
]

y2=[
1.88,
1.72,
1.6,
1.23,
1.1,
1.25,
1.18,
1.26,
1.37,
2,
1.25,
1.14,
1.14,
1.4,
1.37,
1.16,
1.12,
1.16,
1.39,
1.52,
1.4,
1.49,
1.22,
1.15,
1,
1.66,
1.06,
1.3,
1.23,
1.13,
1.56,
1.37,
1.96,
1.31,
1.13,
0.79,
1.47,
1.25,
1.03,
1.09,
1.01,
1.33,
1.22,
1.11,
1.12,
1.33,
1.22,
1.29,
1.41,
1.29
]

ddnet_dense = y1
    # [1.619869195749165, 1.2534476840594591, 1.6217587034820226, 1.5198317614006255, 1.52165895125691938, 1.394100258609469, 1.40918873621349, 1.896739122699671, 1.4949243595024055, 1.6400015524324676, 1.580249678312433, 1.8602809966008447, 1.7233836306307002, 1.9824244336039276, 1.667775965152278, 1.6573083794241767, 1.5091041383338657, 1.3732930670783963, 1.5964015275627175, 1.722401153395218, 1.6181639770770493, 1.741754463210066, 1.4483390060802352, 1.6215287636796336, 1.6434335176662627, 1.7777747510034254, 1.453795085699457, 1.724922061806888, 1.6621801047069407, 1.603052568208575, 1.4036851085930762, 1.3751489974160536, 1.5953358360330994, 1.3916576853963247, 1.4098965300114057, 1.6637610885958871, 1.953069511849514, 1.6472267452476297, 1.3304305497935152, 1.5750239483721447, 1.5359605667571976, 1.7578610074078456, 1.7506204870952358, 1.2104994785029195, 1.320863481891231, 1.3302598129179708, 1.4368063997241536, 1.8062079438081955, 1.7339879402551512, 1.346710899883921]

ddnet_gc = y2
    # [1.8228693135756147, 1.7131873319717839, 1.6764870886304596, 1.564623688041025, 1.2643387071849535, 1.4239007524928935, 1.3372617144096013, 1.0091870405772803, 1.5893915830962655, 1.3420651717002356, 1.5472481713605664, 1.2727267202599686, 1.3553610088321706, 1.1082568396111308, 1.1001147011610506, 1.2305538033957388, 1.0908943253755137, 1.5127565091663793, 0.9631229515855877, 1.5790255164627969, 1.096289696064122, 1.2494893824587823, 1.4232029306114347, 1.3715893312490703, 1.267321680483938, 1.352024561978158, 1.331272343638822, 1.5011391949843684, 1.2174601486090726, 1.1845470888840253, 1.5454534148997008, 1.3132726925833453, 1.3415456221833422, 1.3936482069082363, 1.1265428718338062, 1.3324778588667796, 1.2049594423681502, 1.4640948905886961, 1.5311974434099291, 1.2863272169722801, 1.3806074850406445, 1.6351985147632735, 1.2701111923629786, 1.2916758413686886, 1.2967661672749218, 1.1533010582683, 1.8463540962010307, 1.4079976835416992, 1.4629831420791746, 1.2949126330588694]
# [0.8, 1.0, 1.2, 1.4, 1.5999999999999999, 1.7999999999999998, 1.9999999999999998]

# print(ddnet_ml_vgg16_dense)
# print(len(ddnet_ml_vgg16_dense))




y_ticks = list(np.arange(0.8, 2.2, 0.2))
print(y_ticks)
# print(f'min: {min(ddnet_ml_vgg16_dense)} max: {max(ddnet_ml_vgg16_dense)}')
# Generate some data
fig, ax = plt.subplots(figsize=(9, 8), dpi=300)
ax.set_ylim(0.75,2.00)
# ax.set_xlim([0,52])
# y = ddnet_ml_vgg16_epochs
ax.set_yticks(y_ticks)
x = range(1, len(ddnet_dense) + 1)
# Create the line plot
ax.plot(x, ddnet_dense, label='DDNet', color='blue')
ax.plot(x, ddnet_gc, label='DDNet + GC', color='maroon')

ax.hlines(y = 1.58, xmin=1, xmax=50 , color = 'blue', linestyle = 'dashed', linewidth=2 )
ax.hlines(y = 1.36, xmin=1, xmax=50 , color = 'maroon', linestyle = 'dashed', linewidth=2)

# ax.legend(loc='lower left', bbox_to_anchor=(0.1, -0.3), ncol=2, fontsize=14.5)
# fig()
ax.legend()
# Create the bars for the two categories at each x position
ax.set_xlabel('Epochs #',fontsize=MEDIUM_SIZE)
ax.set_ylabel('Time (in mins)',fontsize=MEDIUM_SIZE)
ax.set_title('Time/Epoch comparison')

fig.tight_layout()
plt.show()